# -*- coding: utf-8 -*-
"""2025_SABR_Analytics_TY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11U9nxtVyuwq4yr2R-nnFLC9FnJSR_whr

## Readme

This is a code created in the 2025 SABR Virtual online session by Nick Wan.

Here is how I followed along to the best of my ability.
"""

import os
import pandas as pd
import numpy as np

# for plotting
import matplotlib.pyplot as plt
from matplotlib.patches import Circle
import seaborn as sns

# Most up to date that I can run
!pip install pybaseball==2.2.7

# getting baseball data
import pybaseball as bb

"""Function defining Cartesian"""

def polar_to_cartesian(radius, angle_degrees):
  """Converts polar coordinates (radius, angle) to Cartesian coordinates (x, y).

  Args:
    radius: The distance from the origin.
    angle_degrees: The angle in degrees measured counterclockwise from the positive x-axis.

  Returns:
    A tuple (x, y) representing the Cartesian coordinates.
  """
  angle_radians = np.radians(angle_degrees)
  x = radius * np.cos(angle_radians)
  y = radius * np.sin(angle_radians)
  return x, y

pid = 669923 # MLB Player Media ID which can be replaced with anyone desired
df = bb.statcast_pitcher(start_dt='2024-03-01',
                         end_dt='2024-11-01',
                         player_id=pid)
df.shape

df.head()

df.columns.values

df['arm_angle'].describe()

df['pfx_z_adj'] = df['pfx_z'].mul(12)
df['pfx_x_adj'] = df['pfx_x'].mul(-12)
x,y = polar_to_cartesian(18,df['arm_angle'])
df['aa_x'] = x
df['aa_z'] = y
aa_x = df['aa_x'].mean()
aa_z = df['aa_z'].mean()

"""Plot trying to replicate Swing Take picture on Baseball Savant

https://baseballsavant.mlb.com/savant-player/george-kirby-669923?stats=statcast-r-pitching-mlb


"""

fig = plt.figure(figsize=(7,7))
fig = sns.scatterplot(data=df, x='pfx_x_adj',
                      y='pfx_z_adj', hue='pitch_name',
                      zorder=2)
plt.plot([0,aa_x], [0,aa_z], 'k-', lw=5)

p1 = Circle((0,0), 6, ls='--', zorder=0, fill=False)
p2 = Circle((0,0), 12, ls='-', zorder=0, fill=False)
p3 = Circle((0,0), 18, ls='--', zorder=0, fill=False)
p4 = Circle((0,0), 24, ls='-', zorder=0, fill=False)
p5 = Circle((0,0), 26, ls='-', zorder=-1,
            color=(228/255,242/255,245/255))

ps = [p1, p2, p3, p4, p5]

for p in ps:
  fig.add_artist(p)

plt.text(-25, 12, 'More Rise →', rotation=90)
plt.text(-25, -12, '← More Drop', rotation=90, va='top')
plt.text(4, -25, 'Towards 3B →')
plt.text(-4, -25, '← Towards 1B', ha='right')

plt.axhline(y=0, color='black', linestyle='-', zorder=1)
plt.axvline(x=0, color='black', linestyle='-', zorder=1)
plt.xlim(-28,28)
plt.ylim(-28,28)
plt.legend(bbox_to_anchor=(1.05, 1), loc=2)
sns.despine(left=True, bottom=True)
fig.xaxis.set_visible(False)
fig.yaxis.set_visible(False)
fig.set_aspect('equal')
plt.show()